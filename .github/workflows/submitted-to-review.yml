# .github/workflows/issue-management.yml
name: Issue Management
on:
  issues:
    types: [assigned]

jobs:
  update-issue:
    runs-on: ubuntu-latest
    if: startsWith(github.event.issue.title, '[CR]') && contains(github.event.issue.labels.*.name, 'submitted')
    steps:
      # First, checkout the repository
      - uses: actions/checkout@v3
      
      # Login to GitHub CLI
      - name: Login to GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
          
      # Now update the labels
      - name: Update Issue Label
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.repository }}
        run: |
          gh issue edit $ISSUE_NUMBER --repo $REPO --remove-label "submitted" --add-label "review"

      - name: Move Issue in Project
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        uses: actions/github-script@v6
        with:
          script: |
            const projectQuery = `
              query($org: String!, $number: Int!) {
                organization(login: $org) {
                  projectV2(number: $number) {
                    id
                    field(name: "Status") {
                      ... on ProjectV2SingleSelectField {
                        id
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            `;

            const updateProjectQuery = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { 
                      singleSelectOptionId: $optionId
                    }
                  }
                ) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;

            try {
              const project = await github.graphql(projectQuery, {
                org: context.repo.owner,
                number: 2
              });

              const statusField = project.organization.projectV2.field;
              const reviewOption = statusField.options.find(opt => opt.name === "Review");

              // Get the item ID for this issue in the project
              const itemId = /* Query for item ID */;

              await github.graphql(updateProjectQuery, {
                projectId: project.organization.projectV2.id,
                itemId: itemId,
                fieldId: statusField.id,
                optionId: reviewOption.id
              });

            } catch (error) {
              console.error('Error:', error);
              core.setFailed(error.message);
            }
