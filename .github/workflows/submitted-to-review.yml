name: CR Issue Label Management
on:
  issues:
    types: [assigned]
permissions:
  issues: write
  contents: read
jobs:
  update-label:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            try {
              // Query for the current issue's project item
              const issueQuery = `
                query($owner: String!, $repo: String!, $number: Int!) {
                  repository(owner: $owner, name: $repo) {
                    issue(number: $number) {
                      projectItems(first: 100) {
                        nodes {
                          id
                          project {
                            id
                          }
                          fieldValues(first: 100) {
                            nodes {
                              ... on ProjectV2ItemFieldSingleSelectValue {
                                name
                                field {
                                  ... on ProjectV2SingleSelectField {
                                    id
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `;
              
              const issueResult = await github.graphql(issueQuery, {
                owner: context.repo.owner,
                repo: context.repo.repo,
                number: context.payload.issue.number
              });
              
              console.log('Issue project data:', JSON.stringify(issueResult, null, 2));
              
              const projectItems = issueResult.repository.issue.projectItems.nodes;
              const projectItem = projectItems.find(item => {
                const statusValue = item.fieldValues.nodes.find(
                  value => value.name?.toLowerCase() === 'submitted'
                );
                return statusValue !== undefined;
              });
              
              if (!projectItem) {
                console.log('Issue not found in project or not in Submitted status');
                return;
              }
              
              // Update the status field using the exact IDs from your project
              const mutation = `
                mutation {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: "PVT_kwHOBJsXdM4Arizg"
                      itemId: "${projectItem.id}"
                      fieldId: "PVTSSF_lAHOBJsXdM4ArizgzginKI8"
                      value: {
                        singleSelectOptionId: "31eff047"
                      }
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `;
              
              await github.graphql(mutation);
              
              console.log('Successfully updated project item status from Submitted to Review');
              
            } catch (error) {
              console.error('Error occurred:', error);
              console.error('Error message:', error.message);
              throw error;
            }
